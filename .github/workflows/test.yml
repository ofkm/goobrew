name: Tests

on:
    push:
        branches:
            - main
            - master
    pull_request:
        branches:
            - main
            - master

permissions:
    contents: read
    pull-requests: read

jobs:
    test:
        name: Test
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest]
                go-version: [1.25.x, stable]

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Set up Go
              uses: actions/setup-go@v6
              with:
                  go-version: ${{ matrix.go-version }}
                  cache: true

            - name: Download dependencies
              run: go mod download

            - name: Verify dependencies
              run: go mod verify

            - name: Run tests
              run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

            - name: Generate coverage report
              run: go tool cover -func=coverage.out

            - name: Upload coverage to artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-${{ matrix.os }}-${{ matrix.go-version }}
                  path: coverage.out
                  retention-days: 7

    lint:
        name: Lint
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Set up Go
              uses: actions/setup-go@v6
              with:
                  go-version: stable
                  cache: true

            - name: Run golangci-lint
              uses: golangci/golangci-lint-action@v8
              with:
                  version: latest
                  args: --timeout=5m

    build:
        name: Build
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Set up Go
              uses: actions/setup-go@v6
              with:
                  go-version: stable
                  cache: true

            - name: Build binary
              run: go build -v -o goobrew${{ matrix.os == 'windows-latest' && '.exe' || '' }} .

            - name: Upload binary artifact
              uses: actions/upload-artifact@v4
              with:
                  name: goobrew-${{ matrix.os }}
                  path: goobrew${{ matrix.os == 'windows-latest' && '.exe' || '' }}
                  retention-days: 7

    coverage-report:
        name: Coverage Summary
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name == 'pull_request'

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Set up Go
              uses: actions/setup-go@v6
              with:
                  go-version: stable

            - name: Run tests with coverage
              run: go test -v -coverprofile=coverage.out -covermode=atomic ./...

            - name: Calculate coverage
              id: coverage
              run: |
                  COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
                  echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
                  echo "### Test Coverage: $COVERAGE" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "#### Detailed Coverage:" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY

            - name: Comment coverage on PR
              uses: actions/github-script@v7
              if: github.event_name == 'pull_request'
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const coverage = '${{ steps.coverage.outputs.coverage }}';
                      const comment = `### ðŸ“Š Test Coverage Report

                      **Total Coverage:** ${coverage}

                      <details>
                      <summary>View detailed coverage</summary>

                      \`\`\`
                      ${process.env.COVERAGE_DETAILS}
                      \`\`\`
                      </details>

                      _Generated by GitHub Actions_`;

                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: comment
                      });
              env:
                  COVERAGE_DETAILS: ${{ steps.coverage.outputs.coverage }}
